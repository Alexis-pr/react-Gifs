{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/UseFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categor","alert","type","value","onChange","target","placeholder","getGifs","category","a","url","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","UseFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAwCeA,EAnCK,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cACnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,mCAEI,sBAAMC,SAdM,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,QAAU,GAC9BR,GAAc,SAAAS,GAAO,OAAKP,GAAL,mBAAqBO,OAC1CN,EAAc,KAEZO,MAAM,iCAQN,SACI,uBACIC,KAAK,OACLC,MAAOV,EACPW,SArBG,SAACR,GAChBF,EAAcE,EAAES,OAAOF,QAqBXG,YAAY,oB,+BC5BnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACkCF,EADlC,8DAEDG,MAAMD,GAFL,cAEbE,EAFa,gBAGEA,EAAIC,OAHN,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAMF,EAAIE,MACVT,IAAKO,EAAIG,OAAOC,iBAAiBX,QARtB,kBAWbK,GAXa,4CAAH,sDCAPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAE/B,OACI,sBAAKa,UAAU,8CAAf,UAEQ,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,6BAAKA,QCJRO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAOvB,ECR0B,SAACA,GACzB,MAA0BhB,mBAAS,CAC/BsB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAZIC,qBAAW,WACRvB,EAASC,GACPuB,MAAM,SAAAC,GACHC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEb,UAET,CAACnB,IAEAoB,EDTqBM,CAAc1B,GAAhCY,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAEjB,OACI,qCAEKA,GAAW,cACZ,oBAAIJ,UAAU,sDAAd,SAAqEf,IAHzE,IAGwF,uBACpF,qBAAKe,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEjBpBiB,EAAe,WAExB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KASA,OACI,qCACA,qBAAKgC,UAAU,UAAf,SACI,sBAAKA,UAAU,6BAAf,UACI,iDACA,cAAC,EAAD,CAAchC,cAAgBA,SAIrC,qBAAKgC,UAAU,YAAf,SAEG,6BAEIa,EAAWpB,KAAI,SAACR,GAAD,OACf,cAAC,EAAD,CAEIA,SAAUA,GADLA,c,MCvBzB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0c69c98c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nconst AddCategory = ( {setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleChange=(e)=>{\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit =(e)=>{\r\n        e.preventDefault()\r\n        if( inputValue.trim().length >= 3){\r\n          setCategories(categor => [inputValue , ...categor ] )\r\n          setInputValue('')\r\n        }else{\r\n            alert('Tiene q ser mayor a 3 letras')\r\n        }\r\n            \r\n    }\r\n\r\n    return (\r\n        <>\r\n         {/*    <h2>Buscar...</h2>   */}\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                    type='text'\r\n                    value={inputValue}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Buscar....\"\r\n                />\r\n            </form>\r\n             \r\n        </>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\nexport default AddCategory\r\n","\r\n\r\nexport const getGifs = async (category)=>{\r\n    const url= `https://api.giphy.com/v1/gifs/search?q=${category}&limit=9&api_key=RA0py99IcKTeJrCqPKFeqWS9oe7S6W6T`;\r\n    const res = await fetch(url)\r\n    const {data} = await res.json()\r\n    const gifs = data.map( img=>{\r\n        return {\r\n            id: img.id,\r\n            title:img.title ,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n   return gifs\r\n\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    /* console.log(title,url) */\r\n    return (\r\n        <div className='card animate__animated animate__fadeInDown '>   \r\n               \r\n                <img src={url} alt={title} />\r\n                <h4>{title}</h4>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { UseFetchGifs } from '../hooks/UseFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n /*    const [images, setImages] = useState([])\r\n    useEffect(() => {\r\n        getGifs(category)\r\n         .then(setImages)\r\n    }, [category])\r\n      */\r\n  const {data:images,loading} = UseFetchGifs( category);\r\n\r\n    return (\r\n        <>\r\n         \r\n            {loading && 'cargando...' }\r\n            <h3 className=\"animate__animated animate__fadeIn animate__delay-2s\">{category}</h3> <hr/> \r\n            <div className='card-grid'>\r\n                {\r\n                    images.map((img)=> (\r\n                    <GifGridItem \r\n                        key={img.id}\r\n                        {...img} /* Esto es igual a { img.url , img.title} tambien se puede usar el destructurado pero esto tomaria mas lineas de codigo\r\n                        mientras que de esta forma es mas facil y legible el codigo  */\r\n                        />))\r\n                }\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from './../helpers/GetGifs';\r\n\r\nexport const UseFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n        useEffect( () => {\r\n           getGifs( category)\r\n            .then( imgs => {\r\n                setTimeout(() => {\r\n                    setstate({\r\n                        data:imgs,\r\n                        loading:false\r\n                    })   \r\n                }, 1000);\r\n            })\r\n        },[category])\r\n\r\n    return state\r\n}","\r\nimport React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n   \r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n  /*  const handleAdd = () =>{\r\n        //setCategories([...categories, 'HxH']) puede ser asi  O\r\n        setCategories(category => [...category,'Hxh'])\r\n        // se utiliza el operador spread para realizar una copia del array en ambos ejemplos y de esta forma agregar el nuevo valor,\r\n        //  si se realiza con un push este No lo agregaria en el estado.\r\n    } */\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"header \">\r\n            <div className=\" container directionHeader\" >\r\n                <h2 > Gif Expert App</h2>\r\n                <AddCategory  setCategories={ setCategories }/>  \r\n            </div>\r\n        </div>\r\n       \r\n         <div className=\"container\">\r\n\r\n            <ol>\r\n            {\r\n                categories.map((category) => (\r\n                <GifGrid\r\n                    key={category} \r\n                    category={category}\r\n                   \r\n                /> ))\r\n            } \r\n            </ol>\r\n         </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}